// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NowPlaying;
//
//    var movie = Movie.FromJson(jsonString);

namespace NowPlaying
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Movie
    {
        [J("results")]     public List<Result> Results { get; set; }  
        [J("updated")]     public DateTimeOffset Updated { get; set; }
        [J("term")]        public string Term { get; set; }           
        [J("status_code")] public long StatusCode { get; set; }       
        [J("variant")]     public string Variant { get; set; }        
    }

    public partial class Result
    {
        [J("id")]           public string Id { get; set; }               
        [J("picture")]      public object Picture { get; set; }          
        [J("name")]         public string Name { get; set; }             
        [J("locations")]    public List<Location> Locations { get; set; }
        [J("provider")]     public string Provider { get; set; }         
        [J("weight")]       public long Weight { get; set; }             
        [J("external_ids")] public ExternalIds ExternalIds { get; set; } 
    }

    public partial class ExternalIds
    {
        [J("iva_rating")]      public object IvaRating { get; set; }     
        [J("imdb")]            public Imdb Imdb { get; set; }            
        [J("tmdb")]            public Imdb Tmdb { get; set; }            
        [J("wiki_data")]       public Imdb WikiData { get; set; }        
        [J("iva")]             public Iva Iva { get; set; }              
        [J("gracenote")]       public object Gracenote { get; set; }     
        [J("rotten_tomatoes")] public object RottenTomatoes { get; set; }
        [J("facebook")]        public object Facebook { get; set; }      
    }

    public partial class Imdb
    {
        [J("url")] public string Url { get; set; }
        [J("id")]  public string Id { get; set; } 
    }

    public partial class Iva
    {
        [J("id")][JsonConverter(typeof(ParseStringConverter))] public long Id { get; set; }
    }

    public partial class Location
    {
        [J("icon")]         public object Icon { get; set; }       
        [J("display_name")] public string DisplayName { get; set; }
        [J("name")]         public string Name { get; set; }       
        [J("id")]           public string Id { get; set; }         
        [J("url")]          public object Url { get; set; }        
    }

    public partial class Movie
    {
        public static Movie FromJson(string json) => JsonConvert.DeserializeObject<Movie>(json, NowPlaying.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Movie self) => JsonConvert.SerializeObject(self, NowPlaying.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
